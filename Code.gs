// =================================================================
// üìã Smart Delivery Insight - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Bad Value
// =================================================================

/**
 * 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Web App (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
 */
function doGet() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Login.html ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Login.html...');
    
    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á HTML Template
    const template = HtmlService.createTemplateFromFile('Login');
    
    if (!template) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Login.html');
    }
    
    console.log('‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Login.html ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    
    return template.evaluate()
        .setTitle('Smart Delivery Insight')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
        
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô doGet():', error.toString());
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Error ‡πÅ‡∏ó‡∏ô
    return createErrorPage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Login.html ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß');
  }
}

/**
 * 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
 * @param {string} filename - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ include
 * @returns {string} ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠ Error Message
 */
function include(filename) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ filename ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!filename || typeof filename !== 'string') {
      throw new Error('‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
    console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: ${filename}`);
    
    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á HTML Output
    const output = HtmlService.createHtmlOutputFromFile(filename);
    
    if (!output) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filename}`);
    }
    
    const content = output.getContent();
    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ${filename} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${content.length} characters)`);
    
    return content;
    
  } catch (error) {
    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô include(${filename}):`, error.toString());
    
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Error Message ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ throw error
    return `<!-- Error loading ${filename}: ${error.toString()} -->
            <div style="color: red; padding: 20px; border: 1px solid red; margin: 10px;">
              <h3>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
              <p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå <strong>${filename}</strong> ‡πÑ‡∏î‡πâ</p>
              <p>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${error.toString()}</p>
            </div>`;
  }
}

/**
 * 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Error ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
 * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
 * @returns {HtmlOutput} ‡∏´‡∏ô‡πâ‡∏≤ HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á error
 */
function createErrorPage(message) {
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Smart Delivery Insight - Error</title>
      <meta charset="utf-8">
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .error-container { 
          border: 2px solid #ff4444; 
          padding: 20px; 
          border-radius: 8px; 
          background: #fff5f5; 
        }
        .error-title { color: #cc0000; margin-top: 0; }
        .error-message { color: #333; }
        .help-section { 
          margin-top: 20px; 
          padding: 15px; 
          background: #f0f8ff; 
          border-radius: 5px; 
        }
      </style>
    </head>
    <body>
      <div class="error-container">
        <h2 class="error-title">‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
        <p class="error-message">${message}</p>
        
        <div class="help-section">
          <h3>üõ†Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</h3>
          <ol>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå <strong>Login.html</strong> ‡πÉ‡∏ô Google Apps Script</li>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (case-sensitive)</li>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå HTML ‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</li>
            <li>‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà</li>
          </ol>
        </div>
        
        <button onclick="location.reload()" style="
          padding: 10px 20px; 
          background: #4CAF50; 
          color: white; 
          border: none; 
          border-radius: 4px; 
          cursor: pointer;
          margin-top: 15px;
        ">üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>
      </div>
    </body>
    </html>
  `;
  
  return HtmlService.createHtmlOutput(html)
      .setTitle('Smart Delivery Insight - Error');
}

/**
 * 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 * @returns {object} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 */
function checkProjectFiles() {
  try {
    const files = DriveApp.getFilesByType(MimeType.GOOGLE_APPS_SCRIPT);
    const fileList = [];
    
    while (files.hasNext()) {
      const file = files.next();
      fileList.push({
        name: file.getName(),
        id: file.getId(),
        lastModified: file.getLastUpdated()
      });
    }
    
    console.log('üìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ:', fileList);
    return { status: 'success', files: fileList };
    
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ:', error.toString());
    return { status: 'error', message: error.toString() };
  }
}

/**
 * 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
 * @param {string} filename - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 * @returns {object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
function testFileLoad(filename) {
  try {
    const content = include(filename);
    
    return {
      status: 'success',
      filename: filename,
      contentLength: content.length,
      hasError: content.includes('<!-- Error loading'),
      preview: content.substring(0, 100) + '...'
    };
    
  } catch (error) {
    return {
      status: 'error',
      filename: filename,
      error: error.toString()
    };
  }
}

// =================================================================
// üîê ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
// =================================================================

/**
 * 6. ‡∏£‡∏∞‡∏ö‡∏ö Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
function getCachedUserData() {
  const cache = CacheService.getScriptCache();
  const CACHE_KEY = 'USER_DATABASE';
  const CACHE_DURATION = 300; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  
  let userData = cache.get(CACHE_KEY);
  
  if (userData) {
    console.log('‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Cache');
    return JSON.parse(userData);
  }
  
  console.log('üìä ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Sheet');
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("SDIP Employee Database");
    
    if (!sheet) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet "SDIP Employee Database"');
    }
    
    const data = sheet.getDataRange().getValues();
    const userMap = {};
    
    for (let i = 1; i < data.length; i++) {
      const username = (data[i][1] || '').toString().trim();
      if (username) {
        userMap[username] = {
          password: (data[i][2] || '').toString(),
          role: (data[i][3] || '').toString().trim(),
          rowIndex: i + 1
        };
      }
    }
    
    cache.put(CACHE_KEY, JSON.stringify(userMap), CACHE_DURATION);
    return userMap;
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.toString());
    return {};
  }
}

/**
 * 7. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
 */
function userLogin(formData) {
  const startTime = new Date().getTime();
  
  if (!formData || !formData.username || !formData.password) {
    return { 
      status: 'error', 
      message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username ‡πÅ‡∏•‡∏∞ Password ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
      processTime: new Date().getTime() - startTime
    };
  }

  try {
    const userData = getCachedUserData();
    const username = formData.username.trim();
    const password = formData.password;
    
    const user = userData[username];
    
    if (user && user.password === password) {
      console.log('‚úÖ ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', username);
      
      const token = Utilities.getUuid();
      const expiration = new Date().getTime() + (2 * 24 * 60 * 60 * 1000);
      
      const userProperties = PropertiesService.getUserProperties();
      userProperties.setProperty(token, JSON.stringify({
        username: username,
        role: user.role,
        expires: expiration,
        loginTime: new Date().toISOString()
      }));
      
      const processTime = new Date().getTime() - startTime;
      console.log(`‚ö° ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${processTime}ms`);
      
      return { 
        status: 'success', 
        role: user.role, 
        token: token,
        processTime: processTime
      };
      
    } else {
      console.log('‚ùå ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', username);
      return { 
        status: 'error', 
        message: 'Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        processTime: new Date().getTime() - startTime
      };
    }
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô:', error.toString());
    return { 
      status: 'error', 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      processTime: new Date().getTime() - startTime
    };
  }
}

/**
 * 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session
 */
function checkSessionToken(token) {
  if (!token) {
    return { status: 'invalid', reason: '‡πÑ‡∏°‡πà‡∏°‡∏µ token' };
  }
  
  try {
    const userProperties = PropertiesService.getUserProperties();
    const sessionData = userProperties.getProperty(token);
    
    if (!sessionData) {
      return { status: 'invalid', reason: 'token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
    }
    
    const session = JSON.parse(sessionData);
    const currentTime = new Date().getTime();
    
    if (currentTime < session.expires) {
      session.expires = currentTime + (2 * 24 * 60 * 60 * 1000);
      session.lastActivity = new Date().toISOString();
      userProperties.setProperty(token, JSON.stringify(session));
      
      return { 
        status: 'valid', 
        username: session.username, 
        role: session.role,
        loginTime: session.loginTime
      };
    } else {
      userProperties.deleteProperty(token);
      return { status: 'invalid', reason: 'Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' };
    }
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session:', error.toString());
    return { status: 'invalid', reason: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö' };
  }
}

/**
 * 9. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
 */
function logout(token) {
  try {
    if (token) {
      const userProperties = PropertiesService.getUserProperties();
      userProperties.deleteProperty(token);
      console.log('‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
      return { status: 'success', message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' };
    }
    return { status: 'success', message: '‡πÑ‡∏°‡πà‡∏°‡∏µ Session ‡πÉ‡∏´‡πâ‡∏•‡∏ö' };
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö:', error.toString());
    return { status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' };
  }
}

/**
 * 10. ‡∏î‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ Dashboard (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
 */
function getDashboardHtml() {
  try {
    return include('Dashboard');
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Dashboard:', error.toString());
    return createErrorPage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Dashboard.html').getContent();
  }
}
// =================================================================
// üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
// =================================================================

/**
 * 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
 * @param {string} token - Session token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * @returns {object} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
 */
function logoutUser(token) {
  try {
    console.log('üö™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...');
    
    if (token) {
      // ‡∏•‡∏ö Session ‡∏à‡∏≤‡∏Å Server
      const userProperties = PropertiesService.getUserProperties();
      userProperties.deleteProperty(token);
      console.log('‚úÖ ‡∏•‡∏ö Session ‡∏à‡∏≤‡∏Å Server ‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    return { 
      status: 'success', 
      message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö:', error.toString());
    return { 
      status: 'error', 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
      error: error.toString()
    };
  }
}

/**
 * 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function clearAllUserData() {
  try {
    console.log('üßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
    
    // ‡∏•‡πâ‡∏≤‡∏á Cache
    const cache = CacheService.getScriptCache();
    cache.remove('USER_DATABASE');
    
    // ‡∏•‡πâ‡∏≤‡∏á Properties (‡∏ó‡∏∏‡∏Å Session)
    const userProperties = PropertiesService.getUserProperties();
    const allProps = userProperties.getProperties();
    
    Object.keys(allProps).forEach(key => {
      try {
        const data = JSON.parse(allProps[key]);
        if (data.username && data.expires) {
          // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Session Token
          userProperties.deleteProperty(key);
          console.log(`üóëÔ∏è ‡∏•‡∏ö Session: ${data.username}`);
        }
      } catch (e) {
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Session Token
      }
    });
    
    console.log('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    return { status: 'success', message: '‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' };
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.toString());
    return { status: 'error', message: error.toString() };
  }
}

/**
 * 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 * @returns {object} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function getAllActiveSessions() {
  try {
    const userProperties = PropertiesService.getUserProperties();
    const allProps = userProperties.getProperties();
    const sessions = [];
    
    Object.keys(allProps).forEach(token => {
      try {
        const sessionData = JSON.parse(allProps[token]);
        if (sessionData.username && sessionData.expires) {
          sessions.push({
            token: token.substring(0, 8) + '...',
            username: sessionData.username,
            role: sessionData.role,
            loginTime: sessionData.loginTime,
            expires: new Date(sessionData.expires).toISOString(),
            isExpired: new Date().getTime() > sessionData.expires
          });
        }
      } catch (e) {
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Session data
      }
    });
    
    return {
      status: 'success',
      sessions: sessions,
      count: sessions.length
    };
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π Session:', error.toString());
    return { status: 'error', message: error.toString() };
  }
}

/**
 * 4. ‡∏•‡πâ‡∏≤‡∏á Session ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function cleanExpiredSessions() {
  try {
    const userProperties = PropertiesService.getUserProperties();
    const allProps = userProperties.getProperties();
    const currentTime = new Date().getTime();
    let cleanedCount = 0;
    
    Object.keys(allProps).forEach(token => {
      try {
        const sessionData = JSON.parse(allProps[token]);
        if (sessionData.expires && currentTime > sessionData.expires) {
          userProperties.deleteProperty(token);
          cleanedCount++;
          console.log(`üóëÔ∏è ‡∏•‡∏ö Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${sessionData.username || 'Unknown'}`);
        }
      } catch (e) {
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Session data
      }
    });
    
    return {
      status: 'success',
      message: `‡∏•‡πâ‡∏≤‡∏á Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ${cleanedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      cleanedCount: cleanedCount
    };
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á Session:', error.toString());
    return { status: 'error', message: error.toString() };
  }
}
