// =================================================================
// üéØ SMART DELIVERY INSIGHT - PROFESSIONAL CODE STRUCTURE
// =================================================================
// Version: 2.0.0
// Last Updated: 2025-09-30
// Authors: ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏Å‡∏£ (‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£), ‡∏ó‡∏µ‡∏° SDIP
// Description: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏î‡πâ‡∏ß‡∏¢ Google Apps Script
// =================================================================

// =================================================================
// üìÇ SECTION 1: WEB APP INITIALIZATION & ROUTING
// =================================================================

/**
 * 1.1 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (Web App Entry Point)
 * 
 * Description: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Web App
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Login ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
 * 
 * @returns {HtmlOutput} HTML page ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (Login ‡∏´‡∏£‡∏∑‡∏≠ Error)
 * 
 * Technical Notes:
 * - ‡πÉ‡∏ä‡πâ HtmlService.createTemplateFromFile() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î HTML
 * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ XFrameOptionsMode.ALLOWALL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô iframe ‡πÑ‡∏î‡πâ
 * - ‡∏°‡∏µ Error Handling ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏¢
 */
function doGet() {
  const MAIN_FILE = 'Login';
  
  try {
    console.log(`üöÄ [${getCurrentThaiDateTime()}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Smart Delivery Insight`);
    console.log(`üîç [INIT] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: ${MAIN_FILE}.html`);
    
    const template = HtmlService.createTemplateFromFile(MAIN_FILE);
    
    if (!template) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå ${MAIN_FILE}.html ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ`);
    }
    
    console.log(`‚úÖ [INIT] ‡πÇ‡∏´‡∏•‡∏î ${MAIN_FILE}.html ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    
    return template.evaluate()
        .setTitle('Smart Delivery Insight - Postman System')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
        .addMetaTag('viewport', 'width=device-width, initial-scale=1')
        .setFaviconUrl('https://www.thailandpost.com/favicon.ico');
        
  } catch (error) {
    console.error(`‚ùå [INIT ERROR] ${error.toString()}`);
    return createErrorPage('‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', error.toString());
  }
}

/**
 * 1.2 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå HTML/CSS/JS
 * 
 * Description: ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô HTML ‡∏´‡∏•‡∏±‡∏Å
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö <?!= include('‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå') ?> ‡πÉ‡∏ô HTML Template
 * 
 * @param {string} filename - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ .html)
 * @returns {string} ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏£‡∏∑‡∏≠ HTML error message
 * 
 * Example Usage:
 * <?!= include('CSS') ?>
 * <?!= include('JavaScript') ?>
 */
function include(filename) {
  const startTime = new Date().getTime();
  
  try {
    if (!filename || typeof filename !== 'string') {
      throw new Error('‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string)');
    }
    
    console.log(`üìÑ [INCLUDE] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î: ${filename}`);
    
    const output = HtmlService.createHtmlOutputFromFile(filename);
    
    if (!output) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filename}`);
    }
    
    const content = output.getContent();
    const loadTime = new Date().getTime() - startTime;
    
    console.log(`‚úÖ [INCLUDE] ‡πÇ‡∏´‡∏•‡∏î ${filename} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${content.length} chars, ${loadTime}ms)`);
    
    return content;
    
  } catch (error) {
    console.error(`‚ùå [INCLUDE ERROR] ${filename}: ${error.toString()}`);
    
    return `
      <!-- ‚ö†Ô∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ${filename} -->
      <div style="
        background: #fee; 
        border: 2px solid #c00; 
        padding: 15px; 
        margin: 10px;
        border-radius: 8px;
        font-family: monospace;
      ">
        <strong style="color: #c00;">‚ö†Ô∏è File Load Error</strong><br>
        <strong>File:</strong> ${filename}<br>
        <strong>Error:</strong> ${error.toString()}<br>
        <small>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ</small>
      </div>
    `;
  }
}

/**
 * 1.3 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Error ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
 * 
 * @param {string} title - ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 * @param {string} message - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 * @returns {HtmlOutput} ‡∏´‡∏ô‡πâ‡∏≤ HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á error
 */
function createErrorPage(title, message) {
  const errorHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>Smart Delivery Insight - System Error</title>
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;600&display=swap');
        
        body {
          font-family: 'Kanit', sans-serif;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          min-height: 100vh;
          display: flex;
          align-items: center;
          justify-content: center;
          margin: 0;
          padding: 20px;
        }
        
        .error-container {
          background: white;
          max-width: 600px;
          padding: 40px;
          border-radius: 20px;
          box-shadow: 0 20px 60px rgba(0,0,0,0.3);
          text-align: center;
        }
        
        .error-icon {
          font-size: 64px;
          margin-bottom: 20px;
        }
        
        .error-title {
          color: #e74c3c;
          font-size: 24px;
          font-weight: 600;
          margin-bottom: 15px;
        }
        
        .error-message {
          color: #555;
          font-size: 16px;
          line-height: 1.6;
          margin-bottom: 25px;
          padding: 20px;
          background: #f8f9fa;
          border-radius: 8px;
          word-break: break-word;
        }
        
        .help-section {
          text-align: left;
          background: #e8f4f8;
          padding: 20px;
          border-radius: 8px;
          margin-top: 20px;
        }
        
        .help-section h3 {
          color: #3498db;
          margin-top: 0;
        }
        
        .help-section ol {
          margin: 10px 0;
          padding-left: 20px;
        }
        
        .help-section li {
          margin: 8px 0;
          color: #555;
        }
        
        .btn-retry {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border: none;
          padding: 12px 30px;
          border-radius: 8px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          margin-top: 20px;
          transition: transform 0.2s;
        }
        
        .btn-retry:hover {
          transform: translateY(-2px);
        }
      </style>
    </head>
    <body>
      <div class="error-container">
        <div class="error-icon">‚ö†Ô∏è</div>
        <h1 class="error-title">${title}</h1>
        <div class="error-message">
          <strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</strong><br>
          ${message}
        </div>
        
        <div class="help-section">
          <h3>üõ†Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤</h3>
          <ol>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå <strong>Login.html</strong> ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ</li>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (case-sensitive)</li>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Permissions ‡∏Ç‡∏≠‡∏á Google Apps Script</li>
            <li>‡∏•‡∏≠‡∏á Deploy ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</li>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Logs ‡πÉ‡∏ô Apps Script Editor</li>
          </ol>
        </div>
        
        <button class="btn-retry" onclick="location.reload()">
          üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        </button>
        
        <p style="margin-top: 20px; color: #999; font-size: 12px;">
          Smart Delivery Insight v2.0.0<br>
          Time: ${getCurrentThaiDateTime()}
        </p>
      </div>
    </body>
    </html>
  `;
  
  return HtmlService.createHtmlOutput(errorHtml)
      .setTitle('System Error - Smart Delivery Insight');
}

// =================================================================
// üìÇ SECTION 2: USER AUTHENTICATION SYSTEM
// =================================================================

/**
 * 2.1 ‡∏£‡∏∞‡∏ö‡∏ö Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 * 
 * Description: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Sheet ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
 * 
 * @returns {Object} Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ username ‡πÄ‡∏õ‡πá‡∏ô key ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô value
 * 
 * Data Structure:
 * {
 *   "username1": { password: "xxx", role: "Admin", rowIndex: 2 },
 *   "username2": { password: "yyy", role: "User", rowIndex: 3 }
 * }
 * 
 * Performance:
 * - ‡πÉ‡∏ä‡πâ CacheService.getScriptCache() (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á Script)
 * - Cache ‡∏≠‡∏≤‡∏¢‡∏∏ 5 ‡∏ô‡∏≤‡∏ó‡∏µ (300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
 * - ‡∏•‡∏î Load ‡∏Ç‡∏≠‡∏á Sheet ‡∏•‡∏á 95%
 */
function getCachedUserData() {
  const CACHE_KEY = 'USER_DATABASE';
  const CACHE_DURATION = 300; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  const SHEET_NAME = 'SDIP Employee Database';
  
  const cache = CacheService.getScriptCache();
  let cachedData = cache.get(CACHE_KEY);
  
  if (cachedData) {
    console.log('‚ö° [CACHE HIT] ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏à‡∏≤‡∏Å Cache');
    return JSON.parse(cachedData);
  }
  
  console.log('üìä [CACHE MISS] ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏à‡∏≤‡∏Å Sheet...');
  
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet "${SHEET_NAME}"`);
    }
    
    const data = sheet.getDataRange().getValues();
    const userMap = {};
    let validUserCount = 0;
    
    // ‡∏ß‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Header)
    for (let i = 1; i < data.length; i++) {
      const username = (data[i][1] || '').toString().trim();
      
      if (username) {
        userMap[username] = {
          password: (data[i][2] || '').toString(),
          role: (data[i][3] || 'User').toString().trim(),
          rowIndex: i + 1
        };
        validUserCount++;
      }
    }
    
    console.log(`‚úÖ [CACHE] ‡πÇ‡∏´‡∏•‡∏î ${validUserCount} Users ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á Cache
    cache.put(CACHE_KEY, JSON.stringify(userMap), CACHE_DURATION);
    
    return userMap;
    
  } catch (error) {
    console.error(`‚ùå [CACHE ERROR] ${error.toString()}`);
    return {};
  }
}

/**
 * 2.2 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 * 
 * Description: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Username/Password ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Session Token
 * 
 * @param {Object} formData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° { username, password }
 * @returns {Object} { status, role, token, processTime } ‡∏´‡∏£‡∏∑‡∏≠ { status, message }
 * 
 * Security Features:
 * - ‡πÉ‡∏ä‡πâ Session Token ‡πÅ‡∏ó‡∏ô Cookie
 * - Token ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 2 ‡∏ß‡∏±‡∏ô
 * - ‡πÄ‡∏Å‡πá‡∏ö Token ‡πÉ‡∏ô UserProperties (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
 * 
 * Example Response (Success):
 * {
 *   status: 'success',
 *   role: 'Admin',
 *   token: 'abc-123-xyz',
 *   processTime: 245
 * }
 */
function userLogin(formData) {
  const startTime = new Date().getTime();
  const functionName = 'userLogin';
  
  console.log(`üîê [${functionName}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô...`);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
  if (!formData || !formData.username || !formData.password) {
    console.log(`‚ùå [${functionName}] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`);
    return {
      status: 'error',
      message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username ‡πÅ‡∏•‡∏∞ Password ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
      processTime: new Date().getTime() - startTime
    };
  }
  
  try {
    const userData = getCachedUserData();
    const username = formData.username.trim();
    const password = formData.password;
    
    console.log(`üîç [${functionName}] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö User: ${username}`);
    
    const user = userData[username];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Username ‡πÅ‡∏•‡∏∞ Password
    if (user && user.password === password) {
      console.log(`‚úÖ [${functionName}] ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${username} (${user.role})`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Session Token
      const token = Utilities.getUuid();
      const expiration = new Date().getTime() + (2 * 24 * 60 * 60 * 1000); // 2 ‡∏ß‡∏±‡∏ô
      
      // ‡πÄ‡∏Å‡πá‡∏ö Session
      const userProperties = PropertiesService.getUserProperties();
      userProperties.setProperty(token, JSON.stringify({
        username: username,
        role: user.role,
        expires: expiration,
        loginTime: new Date().toISOString(),
        lastActivity: new Date().toISOString()
      }));
      
      const processTime = new Date().getTime() - startTime;
      console.log(`‚ö° [${functionName}] ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${processTime}ms`);
      
      return {
        status: 'success',
        role: user.role,
        token: token,
        username: username,
        processTime: processTime
      };
      
    } else {
      console.log(`‚ùå [${functionName}] ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${username}`);
      return {
        status: 'error',
        message: 'Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        processTime: new Date().getTime() - startTime
      };
    }
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return {
      status: 'error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
      processTime: new Date().getTime() - startTime
    };
  }
}

/**
 * 2.3 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session Token
 * 
 * @param {string} token - Session token ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns {Object} { status, username, role } ‡∏´‡∏£‡∏∑‡∏≠ { status, reason }
 */
function checkSessionToken(token) {
  const functionName = 'checkSessionToken';
  
  if (!token) {
    return { status: 'invalid', reason: '‡πÑ‡∏°‡πà‡∏°‡∏µ token' };
  }
  
  try {
    const userProperties = PropertiesService.getUserProperties();
    const sessionData = userProperties.getProperty(token);
    
    if (!sessionData) {
      console.log(`‚ùå [${functionName}] Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
      return { status: 'invalid', reason: 'token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
    }
    
    const session = JSON.parse(sessionData);
    const currentTime = new Date().getTime();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏ Token
    if (currentTime < session.expires) {
      // ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ Token ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Last Activity
      session.expires = currentTime + (2 * 24 * 60 * 60 * 1000);
      session.lastActivity = new Date().toISOString();
      userProperties.setProperty(token, JSON.stringify(session));
      
      console.log(`‚úÖ [${functionName}] Token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${session.username}`);
      
      return {
        status: 'valid',
        username: session.username,
        role: session.role,
        loginTime: session.loginTime
      };
    } else {
      // Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      userProperties.deleteProperty(token);
      console.log(`‚è∞ [${functionName}] Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏`);
      return { status: 'invalid', reason: 'Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' };
    }
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return { status: 'invalid', reason: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö' };
  }
}

/**
 * 2.4 ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (Logout)
 * 
 * @param {string} token - Session token ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 * @returns {Object} { status, message }
 */
function logout(token) {
  const functionName = 'logout';
  
  try {
    if (token) {
      const userProperties = PropertiesService.getUserProperties();
      const sessionData = userProperties.getProperty(token);
      
      if (sessionData) {
        const session = JSON.parse(sessionData);
        console.log(`üö™ [${functionName}] ${session.username} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö`);
      }
      
      userProperties.deleteProperty(token);
      return { status: 'success', message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' };
    }
    
    return { status: 'success', message: '‡πÑ‡∏°‡πà‡∏°‡∏µ Session ‡πÉ‡∏´‡πâ‡∏•‡∏ö' };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return { status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' };
  }
}

// =================================================================
// üìÇ SECTION 3: DASHBOARD & PAGE MANAGEMENT
// =================================================================

/**
 * 3.1 ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Dashboard
 * 
 * @returns {string} HTML content ‡∏Ç‡∏≠‡∏á Dashboard
 */
function getDashboardHtml() {
  const functionName = 'getDashboardHtml';
  
  try {
    console.log(`üìä [${functionName}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Dashboard...`);
    return include('Dashboard');
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return createErrorPage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Dashboard', error.toString()).getContent();
  }
}

// =================================================================
// üìÇ SECTION 4: UTILITY FUNCTIONS
// =================================================================

/**
 * 4.1 ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
 * 
 * @returns {string} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô "30 ‡∏Å.‡∏¢. 2568 14:30:45"
 */
function getCurrentThaiDateTime() {
  const now = new Date();
  const thaiYear = now.getFullYear() + 543;
  const thaiMonths = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', 
                      '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'];
  
  const day = now.getDate();
  const month = thaiMonths[now.getMonth()];
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  const seconds = String(now.getSeconds()).padStart(2, '0');
  
  return `${day} ${month} ${thaiYear} ${hours}:${minutes}:${seconds}`;
}

/**
 * 4.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug)
 * 
 * @returns {Object} { status, files } ‡∏´‡∏£‡∏∑‡∏≠ { status, message }
 */
function checkProjectFiles() {
  try {
    const files = [];
    const projectFiles = [
      'Login.html',
      'Dashboard.html', 
      'CSS.html',
      'JavaScript.html'
    ];
    
    projectFiles.forEach(fileName => {
      try {
        const content = HtmlService.createHtmlOutputFromFile(fileName.replace('.html', ''));
        files.push({
          name: fileName,
          status: 'found',
          size: content.getContent().length
        });
      } catch (e) {
        files.push({
          name: fileName,
          status: 'missing',
          error: e.toString()
        });
      }
    });
    
    console.log('üìÅ [FILE CHECK] ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå:', files);
    return { status: 'success', files: files };
    
  } catch (error) {
    console.error('‚ùå [FILE CHECK ERROR]:', error.toString());
    return { status: 'error', message: error.toString() };
  }
}

/**
 * 4.3 ‡∏•‡πâ‡∏≤‡∏á Session ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Maintenance)
 * 
 * @returns {Object} { status, cleanedCount, message }
 */
function cleanExpiredSessions() {
  const functionName = 'cleanExpiredSessions';
  
  try {
    const userProperties = PropertiesService.getUserProperties();
    const allProps = userProperties.getProperties();
    const currentTime = new Date().getTime();
    let cleanedCount = 0;
    
    Object.keys(allProps).forEach(token => {
      try {
        const sessionData = JSON.parse(allProps[token]);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Session ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (sessionData.expires && currentTime > sessionData.expires) {
          userProperties.deleteProperty(token);
          cleanedCount++;
          console.log(`üóëÔ∏è [${functionName}] ‡∏•‡∏ö Session: ${sessionData.username || 'Unknown'}`);
        }
      } catch (e) {
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Session data ‡∏´‡∏£‡∏∑‡∏≠ format ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      }
    });
    
    console.log(`‚úÖ [${functionName}] ‡∏•‡πâ‡∏≤‡∏á ${cleanedCount} Sessions`);
    
    return {
      status: 'success',
      message: `‡∏•‡πâ‡∏≤‡∏á Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ${cleanedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      cleanedCount: cleanedCount
    };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return { status: 'error', message: error.toString() };
  }
}

/**
 * 4.4 ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Session ‡∏ó‡∏µ‡πà Active ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
 * 
 * @returns {Object} { status, sessions, count }
 */
function getAllActiveSessions() {
  const functionName = 'getAllActiveSessions';
  
  try {
    const userProperties = PropertiesService.getUserProperties();
    const allProps = userProperties.getProperties();
    const sessions = [];
    
    Object.keys(allProps).forEach(token => {
      try {
        const sessionData = JSON.parse(allProps[token]);
        
        if (sessionData.username && sessionData.expires) {
          sessions.push({
            token: token.substring(0, 8) + '...',
            username: sessionData.username,
            role: sessionData.role,
            loginTime: sessionData.loginTime,
            lastActivity: sessionData.lastActivity,
            expires: new Date(sessionData.expires).toISOString(),
            isExpired: new Date().getTime() > sessionData.expires
          });
        }
      } catch (e) {
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Session data
      }
    });
    
    console.log(`üìä [${functionName}] ‡∏û‡∏ö ${sessions.length} Active Sessions`);
    
    return {
      status: 'success',
      sessions: sessions,
      count: sessions.length
    };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return { status: 'error', message: error.toString() };
  }
}

// =================================================================
// üìÇ SECTION 5: TESTING & DEBUGGING FUNCTIONS
// =================================================================

/**
 * 5.1 ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
 * 
 * @param {string} filename - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 * @returns {Object} { status, filename, contentLength, preview }
 * 
 * Example Usage:
 * testFileLoad('CSS')
 * testFileLoad('Dashboard')
 */
function testFileLoad(filename) {
  const functionName = 'testFileLoad';
  
  try {
    console.log(`üß™ [${functionName}] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: ${filename}`);
    
    const content = include(filename);
    const hasError = content.includes('<!-- ‚ö†Ô∏è Error');
    
    const result = {
      status: hasError ? 'error' : 'success',
      filename: filename,
      contentLength: content.length,
      hasError: hasError,
      preview: content.substring(0, 100) + '...'
    };
    
    console.log(`${hasError ? '‚ùå' : '‚úÖ'} [${functionName}] ${filename}: ${result.contentLength} chars`);
    
    return result;
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return {
      status: 'error',
      filename: filename,
      error: error.toString()
    };
  }
}

/**
 * 5.2 ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 * 
 * WARNING: ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Development ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!
 * 
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
function testLoginSystem() {
  const functionName = 'testLoginSystem';
  
  console.log(`üß™ [${functionName}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô...`);
  
  const testCases = [
    { username: '', password: '', expectedStatus: 'error' },
    { username: 'invalid_user', password: 'wrong', expectedStatus: 'error' }
  ];
  
  const results = [];
  
  testCases.forEach((testCase, index) => {
    console.log(`üß™ Test Case ${index + 1}: ${testCase.username || '(empty)'}`);
    
    const result = userLogin({
      username: testCase.username,
      password: testCase.password
    });
    
    const passed = result.status === testCase.expectedStatus;
    
    results.push({
      testCase: index + 1,
      input: testCase,
      output: result,
      passed: passed
    });
    
    console.log(`${passed ? '‚úÖ' : '‚ùå'} Test Case ${index + 1}: ${passed ? 'PASSED' : 'FAILED'}`);
  });
  
  const passedCount = results.filter(r => r.passed).length;
  
  return {
    status: 'success',
    totalTests: testCases.length,
    passed: passedCount,
    failed: testCases.length - passedCount,
    results: results
  };
}

/**
 * 5.3 ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cache ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * 
 * @returns {Object} { status, cacheKeys, cacheData }
 */
function inspectCache() {
  const functionName = 'inspectCache';
  
  try {
    const cache = CacheService.getScriptCache();
    const userData = cache.get('USER_DATABASE');
    
    if (userData) {
      const parsedData = JSON.parse(userData);
      const userCount = Object.keys(parsedData).length;
      
      console.log(`üì¶ [${functionName}] Cache ‡∏°‡∏µ ${userCount} Users`);
      
      return {
        status: 'success',
        hasCache: true,
        userCount: userCount,
        sampleUsers: Object.keys(parsedData).slice(0, 5) // ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
      };
    } else {
      console.log(`üì¶ [${functionName}] Cache ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤`);
      return {
        status: 'success',
        hasCache: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Cache'
      };
    }
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return { status: 'error', message: error.toString() };
  }
}

/**
 * 5.4 ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * 
 * @returns {Object} { status, message }
 */
function clearAllCache() {
  const functionName = 'clearAllCache';
  
  try {
    const cache = CacheService.getScriptCache();
    cache.removeAll(['USER_DATABASE']);
    
    console.log(`üßπ [${functionName}] ‡∏•‡πâ‡∏≤‡∏á Cache ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    
    return {
      status: 'success',
      message: '‡∏•‡πâ‡∏≤‡∏á Cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
    };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return { status: 'error', message: error.toString() };
  }
}

// =================================================================
// üìÇ SECTION 6: SYSTEM MAINTENANCE & ADMIN FUNCTIONS
// =================================================================

/**
 * 6.1 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö (Run ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô)
 * 
 * Description: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * - ‡∏•‡∏ö Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 * - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Cache
 * 
 * Setup: ‡∏ï‡∏±‡πâ‡∏á Trigger ‡πÉ‡∏ô Apps Script Editor
 * Triggers > Add Trigger > Function: dailyMaintenance > Time-driven > Day timer
 * 
 * @returns {Object} ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤
 */
function dailyMaintenance() {
  const functionName = 'dailyMaintenance';
  const startTime = new Date().getTime();
  
  console.log(`üîß [${functionName}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô...`);
  
  try {
    // 1. ‡∏•‡πâ‡∏≤‡∏á Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const cleanResult = cleanExpiredSessions();
    
    // 2. ‡∏•‡πâ‡∏≤‡∏á Cache (‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    const cacheResult = clearAllCache();
    
    const duration = new Date().getTime() - startTime;
    
    console.log(`‚úÖ [${functionName}] ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (${duration}ms)`);
    
    return {
      status: 'success',
      message: '‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      duration: duration,
      results: {
        cleanedSessions: cleanResult.cleanedCount || 0,
        cacheCleared: cacheResult.status === 'success'
      },
      timestamp: getCurrentThaiDateTime()
    };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * 6.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
 * 
 * @returns {Object} { status, checks, summary }
 */
function checkSystemHealth() {
  const functionName = 'checkSystemHealth';
  
  console.log(`üè• [${functionName}] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö...`);
  
  const checks = [];
  
  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
  try {
    const fileCheck = checkProjectFiles();
    checks.push({
      name: 'Files',
      status: fileCheck.status,
      details: fileCheck.files || []
    });
  } catch (e) {
    checks.push({ name: 'Files', status: 'error', error: e.toString() });
  }
  
  // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cache
  try {
    const cacheCheck = inspectCache();
    checks.push({
      name: 'Cache',
      status: cacheCheck.status,
      hasData: cacheCheck.hasCache
    });
  } catch (e) {
    checks.push({ name: 'Cache', status: 'error', error: e.toString() });
  }
  
  // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sessions
  try {
    const sessionCheck = getAllActiveSessions();
    checks.push({
      name: 'Sessions',
      status: sessionCheck.status,
      count: sessionCheck.count || 0
    });
  } catch (e) {
    checks.push({ name: 'Sessions', status: 'error', error: e.toString() });
  }
  
  // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Sheet
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet();
    checks.push({
      name: 'Spreadsheet',
      status: 'success',
      sheetName: sheet.getName()
    });
  } catch (e) {
    checks.push({ name: 'Spreadsheet', status: 'error', error: e.toString() });
  }
  
  const allHealthy = checks.every(check => check.status === 'success');
  
  console.log(`${allHealthy ? '‚úÖ' : '‚ö†Ô∏è'} [${functionName}] ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö: ${allHealthy ? '‡∏î‡∏µ' : '‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}`);
  
  return {
    status: allHealthy ? 'healthy' : 'warning',
    checks: checks,
    summary: {
      total: checks.length,
      passed: checks.filter(c => c.status === 'success').length,
      failed: checks.filter(c => c.status === 'error').length
    },
    timestamp: getCurrentThaiDateTime()
  };
}

/**
 * 6.3 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
 * 
 * @returns {Object} ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
function generateUsageReport() {
  const functionName = 'generateUsageReport';
  
  console.log(`üìà [${functionName}] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...`);
  
  try {
    const sessions = getAllActiveSessions();
    const cache = inspectCache();
    
    const report = {
      status: 'success',
      timestamp: getCurrentThaiDateTime(),
      activeSessions: sessions.count || 0,
      cacheStatus: cache.hasCache ? 'active' : 'empty',
      totalUsers: cache.userCount || 0,
      systemUptime: 'Available', // ‡πÉ‡∏ô Production ‡∏≠‡∏≤‡∏à‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Properties
      healthCheck: checkSystemHealth()
    };
    
    console.log(`‚úÖ [${functionName}] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    
    return report;
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return { status: 'error', message: error.toString() };
  }
}

// =================================================================
// üìÇ SECTION 7: SECURITY FUNCTIONS
// =================================================================

/**
 * 7.1 ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Audit Trail)
 * 
 * @param {string} username - ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {string} action - ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (login, logout, access)
 * @param {string} details - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
 */
function logUserActivity(username, action, details) {
  const functionName = 'logUserActivity';
  
  try {
    const LOG_SHEET_NAME = 'Activity Logs';
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    let logSheet = spreadsheet.getSheetByName(LOG_SHEET_NAME);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!logSheet) {
      logSheet = spreadsheet.insertSheet(LOG_SHEET_NAME);
      logSheet.appendRow(['Timestamp', 'Username', 'Action', 'Details', 'IP/Session']);
      console.log(`üìù [${functionName}] ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet "${LOG_SHEET_NAME}" ‡πÉ‡∏´‡∏°‡πà`);
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Log
    logSheet.appendRow([
      new Date().toISOString(),
      username,
      action,
      details,
      Session.getActiveUser().getEmail() || 'Unknown'
    ]);
    
    console.log(`üìù [${functionName}] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${username} - ${action}`);
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
  }
}

/**
 * 7.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
 * 
 * @param {string} username - ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns {Object} { status, suspicious, details }
 */
function detectSuspiciousActivity(username) {
  const functionName = 'detectSuspiciousActivity';
  
  try {
    const userProperties = PropertiesService.getUserProperties();
    const allProps = userProperties.getProperties();
    
    let sessionCount = 0;
    const sessions = [];
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Session ‡∏Ç‡∏≠‡∏á User
    Object.keys(allProps).forEach(token => {
      try {
        const sessionData = JSON.parse(allProps[token]);
        if (sessionData.username === username) {
          sessionCount++;
          sessions.push(sessionData);
        }
      } catch (e) {
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Session data
      }
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Session ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏≠‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥)
    const isSuspicious = sessionCount > 3;
    
    if (isSuspicious) {
      console.log(`‚ö†Ô∏è [${functionName}] ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: ${username} (${sessionCount} sessions)`);
    }
    
    return {
      status: 'success',
      suspicious: isSuspicious,
      sessionCount: sessionCount,
      sessions: sessions,
      threshold: 3
    };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error: ${error.toString()}`);
    return { status: 'error', message: error.toString() };
  }
}

// =================================================================
// üéì TRAINING NOTES FOR TEAM
// =================================================================

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô:
 * 
 * ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏•‡∏¥‡∏ä (UI Designer):
 * - ‡πÑ‡∏ü‡∏•‡πå CSS.html ‡πÅ‡∏•‡∏∞ Login.html ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡πà‡∏ß‡∏ô UI
 * - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç CSS ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö Logic
 * - ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ CSS (:root) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå
 * 
 * ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≠‡∏£‡πå‡∏ô (‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö):
 * - ‡∏î‡∏π Section 2 (Authentication) ‡πÅ‡∏•‡∏∞ Section 6 (Maintenance)
 * - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô checkSystemHealth() ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
 * - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generateUsageReport() ‡πÉ‡∏ä‡πâ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
 * 
 * ‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏ã‡πÄ‡∏ü‡∏µ‡∏¢ (Web Developer):
 * - ‡∏î‡∏π Section 1 (Routing) ‡πÅ‡∏•‡∏∞ Section 3 (Dashboard)
 * - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô include() ‡πÉ‡∏ä‡πâ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå
 * - JavaScript.html ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Client-side Logic
 * 
 * ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏Å‡∏£ (‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£):
 * - ‡∏ó‡∏∏‡∏Å Section ‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
 * - ‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏°‡∏µ JSDoc Comments
 * - ‡∏°‡∏µ Testing Functions ‡πÉ‡∏ô Section 5
 * - ‡∏°‡∏µ Security Functions ‡πÉ‡∏ô Section 7
 */

// =================================================================
// üìå END OF CODE.GS
// =================================================================
// Total Functions: 23
// Total Sections: 7
// Version: 2.0.0
// Last Review: 2025-09-30
// =================================================================
// =================================================================
// üéØ ROLE-BASED DASHBOARD SYSTEM
// =================================================================

/**
 * 1. ‡πÇ‡∏´‡∏•‡∏î Dashboard ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
 * 
 * @param {Object} userInfo - { username, role, token }
 * @returns {string} HTML ‡∏Ç‡∏≠‡∏á Dashboard ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Role
 */
// =================================================================
// üéØ ROLE-BASED DASHBOARD SYSTEM (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
// =================================================================

/**
 * ‡πÇ‡∏´‡∏•‡∏î Dashboard ‡∏ï‡∏≤‡∏° Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * 
 * @param {string} username - Username ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {string} role - Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (USER, POWERUSER, ADMIN)
 * @param {string} token - Auth token (optional)
 * @returns {string} HTML ‡∏Ç‡∏≠‡∏á Dashboard
 */
function getDashboardHtmlWithUserData(username, role, token) {
  const functionName = 'getDashboardHtmlWithUserData';
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters
    console.log(`üìä [${functionName}] Parameters received:`);
    console.log(`   - username: ${username}`);
    console.log(`   - role: ${role}`);
    console.log(`   - token: ${token || 'not provided'}`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á userInfo object ‡∏à‡∏≤‡∏Å parameters
    const userInfo = {
      username: username,
      role: role,
      token: token || ''
    };
    
    console.log(`üìä [${functionName}] ‡πÇ‡∏´‡∏•‡∏î Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${userInfo.username} (${userInfo.role})`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (!userInfo.username || !userInfo.role) {
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ username ‡πÅ‡∏•‡∏∞ role');
    }
    
    // ‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏° Role
    const userRole = userInfo.role.toUpperCase();
    
    switch(userRole) {
      case 'USER':
        return getUserDashboardHtml(userInfo);
        
      case 'POWERUSER':
        return getPowerUserDashboardHtml(userInfo);
        
      case 'ADMIN':
        return getAdminDashboardHtml(userInfo);
        
      default:
        throw new Error(`Role ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${userInfo.role}`);
    }
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    console.error(`‚ùå [${functionName}] Stack:`, error.stack);
    return createErrorDashboard(error.toString());
  }
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ User Dashboard
 */
function getUserDashboardHtml(userInfo) {
  console.log(`üë§ [USER] ‡πÇ‡∏´‡∏•‡∏î Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${userInfo.username}`);
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á User ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
    const userData = getUserWorkOverview(userInfo.username);
    const userProfile = getUserPersonalData(userInfo.username);
    
    // Debug log
    console.log(`üìä [USER] userData type: ${typeof userData}`);
    console.log(`üìä [USER] userData is null?: ${userData === null}`);
    console.log(`üìä [USER] userData is undefined?: ${userData === undefined}`);
    console.log(`üìä [USER] userData:`, JSON.stringify(userData));
    console.log(`üë§ [USER] userProfile:`, JSON.stringify(userProfile));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML Template
    const template = HtmlService.createTemplateFromFile('User_Dashboard');
    template.userInfo = userInfo;
    template.userData = userData;
    template.userProfile = userProfile;
    
    console.log('‚úÖ [USER] ‡∏Å‡∏≥‡∏•‡∏±‡∏á evaluate template...');
    
    // ‚≠ê ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á evaluate ‡πÅ‡∏•‡∏∞ getContent()
    const htmlOutput = template.evaluate();
    const htmlContent = htmlOutput.getContent();
    
    console.log('‚úÖ [USER] Template ‡∏ñ‡∏π‡∏Å evaluate ‡πÅ‡∏•‡πâ‡∏ß, HTML length:', htmlContent.length);
    
    // ‚≠ê Debug: ‡πÅ‡∏™‡∏î‡∏á HTML ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å
    console.log('üìÑ [USER] HTML Preview (first 500 chars):');
    console.log(htmlContent.substring(0, 500));
    
    return htmlContent;
    
  } catch (error) {
    console.error(`‚ùå [USER] Error: ${error.toString()}`);
    console.error(`‚ùå [USER] Stack: ${error.stack}`);
    throw error;
  }
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ PowerUser Dashboard
 */
function getPowerUserDashboardHtml(userInfo) {
  console.log(`‚ö° [POWERUSER] ‡πÇ‡∏´‡∏•‡∏î Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${userInfo.username}`);
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const teamData = getPowerUserTeamData();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
  const template = HtmlService.createTemplateFromFile('PowerUser_Dashboard');
  template.userInfo = userInfo;
  template.teamData = teamData;
  
  return template.evaluate().getContent();
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Admin Dashboard
 */
function getAdminDashboardHtml(userInfo) {
  console.log(`üëë [ADMIN] ‡πÇ‡∏´‡∏•‡∏î Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${userInfo.username}`);
  
  // Admin ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PowerUser
  return getPowerUserDashboardHtml(userInfo);
}

/**
 * 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin/PowerUser)
 * 
 * @returns {Array} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function getAllUsersData() {
  const functionName = 'getAllUsersData';
  const SHEET_NAME = 'SDIP Employee Database';
  
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet "${SHEET_NAME}"`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0]; // ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Header
    const users = [];
    
    // ‡∏ß‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏à‡∏≤‡∏Å Row
      const userObj = {};
      headers.forEach((header, index) => {
        userObj[header] = row[index];
      });
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      userObj.rowIndex = i + 1;
      
      users.push(userObj);
    }
    
    console.log(`‚úÖ [${functionName}] ‡πÇ‡∏´‡∏•‡∏î ${users.length} Users`);
    return users;
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return [];
  }
}

/**
 * 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User)
 * 
 * @param {string} username - Username ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
 */
function getUserPersonalData(username) {
  const functionName = 'getUserPersonalData';
  const SHEET_NAME = 'SDIP Employee Database';
  
  try {
    console.log(`üîç [${functionName}] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á: ${username}`);
    
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet "${SHEET_NAME}"`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Username (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Username ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà Column B = index 1)
    for (let i = 1; i < data.length; i++) {
      const rowUsername = (data[i][1] || '').toString().trim();
      
      if (rowUsername === username) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏à‡∏≤‡∏Å Row
        const userObj = {};
        headers.forEach((header, index) => {
          userObj[header] = data[i][index];
        });
        
        userObj.rowIndex = i + 1;
        
        console.log(`‚úÖ [${functionName}] ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á ${username}`);
        return userObj;
      }
    }
    
    console.log(`‚ö†Ô∏è [${functionName}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á ${username}`);
    return null;
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return null;
  }
}

/**
 * 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML Dashboard ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
 * 
 * @param {Object} userInfo - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô
 * @param {Object|Array} userData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
 * @returns {string} HTML Dashboard
 */
function generateDashboardHtml(userInfo, userData) {
  const functionName = 'generateDashboardHtml';
  const isAdmin = ['ADMIN', 'POWERUSER'].includes(userInfo.role.toUpperCase());
  
  console.log(`üé® [${functionName}] ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡πÅ‡∏ö‡∏ö ${isAdmin ? 'Admin' : 'User'}`);
  
  // ‡∏™‡πà‡∏ß‡∏ô Header
  const headerHtml = `
    <div style="
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 30px;
      border-radius: 16px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
      margin-bottom: 30px;
      color: white;
    ">
      <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">
        <div>
          <h1 style="margin: 0 0 10px 0; font-size: 32px; font-weight: 700;">
            üìÆ Smart Delivery Insight
          </h1>
          <p style="margin: 0; opacity: 0.9; font-size: 16px;">
            ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, <strong>${userInfo.username}</strong> 
            <span style="
              background: rgba(255,255,255,0.2);
              padding: 4px 12px;
              border-radius: 20px;
              margin-left: 10px;
              font-size: 14px;
              font-weight: 600;
            ">
              ${getRoleIcon(userInfo.role)} ${getRoleDisplayName(userInfo.role)}
            </span>
          </p>
        </div>
        <div>
          <button onclick="handleLogout()" style="
            background: rgba(255,255,255,0.2);
            border: 2px solid white;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s;
          " onmouseover="this.style.background='rgba(255,255,255,0.3)'" 
             onmouseout="this.style.background='rgba(255,255,255,0.2)'">
            üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
          </button>
        </div>
      </div>
    </div>
  `;
  
  // ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  let contentHtml = '';
  
  if (isAdmin && Array.isArray(userData)) {
    // Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin/PowerUser - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    contentHtml = generateAdminDashboard(userData, userInfo);
  } else if (userData) {
    // Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    contentHtml = generateUserDashboard(userData, userInfo);
  } else {
    contentHtml = `
      <div style="
        background: #fff3cd;
        border: 1px solid #ffc107;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
      ">
        <h3 style="color: #856404; margin-top: 0;">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
        <p style="color: #856404;">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</p>
      </div>
    `;
  }
  
  // ‡∏£‡∏ß‡∏° HTML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fullHtml = `
    <div style="
      font-family: 'Kanit', 'Inter', sans-serif;
      padding: 20px;
      background: #f5f7fa;
      min-height: 100vh;
    ">
      ${headerHtml}
      ${contentHtml}
    </div>
    
    <script>
      /**
       * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
       */
      function handleLogout() {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
          console.log('üö™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...');
          
          const token = localStorage.getItem('authToken');
          
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Logout
          google.script.run
            .withSuccessHandler(() => {
              console.log('‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
              
              // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ lastUsername ‡πÑ‡∏ß‡πâ)
              localStorage.removeItem('authToken');
              localStorage.removeItem('userRole');
              localStorage.removeItem('loginTime');
              
              // Reload ‡∏´‡∏ô‡πâ‡∏≤
              location.reload();
            })
            .withFailureHandler((error) => {
              console.error('‚ùå Logout Error:', error);
              alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            })
            .logout(token);
        }
      }
      
      /**
       * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Dashboard
       */
      function initDashboard(userInfo) {
        console.log('üé® [DASHBOARD] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Dashboard');
        console.log('üë§ User:', userInfo.username);
        console.log('üé≠ Role:', userInfo.role);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      }
    </script>
  `;
  
  return fullHtml;
}

/**
 * 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin/PowerUser
 * 
 * @param {Array} users - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * @param {Object} currentUser - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * @returns {string} HTML
 */
function generateAdminDashboard(users, currentUser) {
  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
  const totalUsers = users.length;
  const adminCount = users.filter(u => (u.Role || '').toUpperCase() === 'ADMIN').length;
  const powerUserCount = users.filter(u => (u.Role || '').toUpperCase() === 'POWERUSER').length;
  const regularUserCount = users.filter(u => (u.Role || '').toUpperCase() === 'USER').length;
  
  let html = `
    <div style="margin-bottom: 30px;">
      <h2 style="color: #2c3e50; margin-bottom: 20px; font-size: 24px;">
        üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö
      </h2>
      
      <!-- ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πå‡∏î -->
      <div style="
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      ">
        ${generateStatCard('üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', totalUsers, '#3498db')}
        ${generateStatCard('üëë Admin', adminCount, '#e74c3c')}
        ${generateStatCard('‚ö° PowerUser', powerUserCount, '#f39c12')}
        ${generateStatCard('üë§ User', regularUserCount, '#27ae60')}
      </div>
    </div>
    
    <div style="
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    ">
      <h2 style="color: #2c3e50; margin-top: 0; margin-bottom: 20px;">
        üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      </h2>
      
      <div style="overflow-x: auto;">
        <table style="
          width: 100%;
          border-collapse: collapse;
          font-size: 14px;
        ">
          <thead>
            <tr style="background: #f8f9fa;">
              <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
              <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
              <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Username</th>
              <th style="padding: 12px; text-align: center; border-bottom: 2px solid #dee2e6;">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå</th>
              <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
              <th style="padding: 12px; text-align: center; border-bottom: 2px solid #dee2e6;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            </tr>
          </thead>
          <tbody>
  `;
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
  users.forEach((user, index) => {
    const name = user.Name || user['‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '-';
    const username = user.Username || user['Username'] || '-';
    const role = user.Role || user['‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå'] || 'User';
    const email = user.Email || user['‡∏≠‡∏µ‡πÄ‡∏°‡∏•'] || '-';
    
    const roleColor = getRoleColor(role);
    const roleIcon = getRoleIcon(role);
    
    html += `
      <tr style="border-bottom: 1px solid #e9ecef; transition: background 0.2s;"
          onmouseover="this.style.background='#f8f9fa'" 
          onmouseout="this.style.background='white'">
        <td style="padding: 12px;">${index + 1}</td>
        <td style="padding: 12px; font-weight: 600;">${name}</td>
        <td style="padding: 12px; color: #6c757d;">${username}</td>
        <td style="padding: 12px; text-align: center;">
          <span style="
            background: ${roleColor};
            color: white;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
          ">
            ${roleIcon} ${role}
          </span>
        </td>
        <td style="padding: 12px; color: #6c757d; font-size: 13px;">${email}</td>
        <td style="padding: 12px; text-align: center;">
          <span style="color: #27ae60; font-weight: 600;">‚óè</span> Active
        </td>
      </tr>
    `;
  });
  
  html += `
          </tbody>
        </table>
      </div>
    </div>
  `;
  
  return html;
}

/**
 * 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
 * 
 * @param {Object} userData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
 * @param {Object} currentUser - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * @returns {string} HTML
 */
function generateUserDashboard(userData, currentUser) {
  const name = userData.Name || userData['‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || currentUser.username;
  const username = userData.Username || userData['Username'] || currentUser.username;
  const role = userData.Role || userData['‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå'] || currentUser.role;
  const email = userData.Email || userData['‡∏≠‡∏µ‡πÄ‡∏°‡∏•'] || '-';
  const phone = userData.Phone || userData['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'] || '-';
  const department = userData.Department || userData['‡πÅ‡∏ú‡∏ô‡∏Å'] || '-';
  
  return `
    <div style="
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
      max-width: 800px;
      margin: 0 auto;
    ">
      <h2 style="color: #2c3e50; margin-top: 0; margin-bottom: 25px; text-align: center;">
        üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      </h2>
      
      <!-- Profile Card -->
      <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 30px;
        border-radius: 12px;
        text-align: center;
        color: white;
        margin-bottom: 30px;
      ">
        <div style="
          width: 100px;
          height: 100px;
          background: white;
          border-radius: 50%;
          margin: 0 auto 15px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 48px;
        ">
          üë§
        </div>
        <h3 style="margin: 0 0 5px 0; font-size: 24px;">${name}</h3>
        <p style="margin: 0; opacity: 0.9;">@${username}</p>
        <div style="margin-top: 15px;">
          <span style="
            background: rgba(255,255,255,0.2);
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
          ">
            ${getRoleIcon(role)} ${getRoleDisplayName(role)}
          </span>
        </div>
      </div>
      
      <!-- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î -->
      <div style="
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
      ">
        ${generateInfoCard('üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•', email)}
        ${generateInfoCard('üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', phone)}
        ${generateInfoCard('üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å', department)}
        ${generateInfoCard('üé≠ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå', getRoleDisplayName(role))}
      </div>
      
      <!-- ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ -->
      <div style="
        margin-top: 30px;
        padding: 20px;
        background: #e3f2fd;
        border-left: 4px solid #2196f3;
        border-radius: 8px;
      ">
        <h4 style="margin: 0 0 10px 0; color: #1976d2;">
          üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        </h4>
        <ul style="margin: 0; padding-left: 20px; color: #555;">
          <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠</li>
          <li>‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</li>
          <li>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à</li>
        </ul>
      </div>
    </div>
  `;
}

/**
 * 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
 */
function generateStatCard(title, value, color) {
  return `
    <div style="
      background: white;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
      border-left: 4px solid ${color};
      transition: transform 0.2s;
    " onmouseover="this.style.transform='translateY(-5px)'" 
       onmouseout="this.style.transform='translateY(0)'">
      <div style="color: #6c757d; font-size: 14px; margin-bottom: 8px;">
        ${title}
      </div>
      <div style="color: ${color}; font-size: 32px; font-weight: 700;">
        ${value}
      </div>
    </div>
  `;
}

// =================================================================
// üìÇ SECTION 8: DATA RETRIEVAL FUNCTIONS (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
// =================================================================

/**
 * 8.1 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Overview ‡∏Ç‡∏≠‡∏á User
 */
function getUserWorkOverview(username) {
  const functionName = 'getUserWorkOverview';
  const startTime = new Date().getTime();
  
  try {
    console.log(`üìä [${functionName}] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${username}`);
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï‡∏à‡∏£‡∏¥‡∏á (‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå Excel)
    const wrpData = getDataFromSheet(spreadsheet, 'SDIP WRP ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', username);
    const wmsData = getDataFromSheet(spreadsheet, 'SDIP WMS ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≥‡∏™‡πà‡∏á', username);
    
    // ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° R/EMS/COD
    const backlogR = getDataFromSheet(spreadsheet, 'SDIP Backlog R', username);
    const backlogEMS = getDataFromSheet(spreadsheet, 'SDIP Backlog EMS', username);
    const backlogCOD = getDataFromSheet(spreadsheet, 'SDIP Backlog COD', username);
    
    // ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° R/EMS/COD
    const returnedR = getDataFromSheet(spreadsheet, 'SDIP Returned R', username);
    const returnedEMS = getDataFromSheet(spreadsheet, 'SDIP Returned  EMS', username);
    const returnedCOD = getDataFromSheet(spreadsheet, 'SDIP Returned  COD', username);
    
    console.log(`üìä [${functionName}] WRP: ${wrpData.length}, WMS: ${wmsData.length}`);
    console.log(`üìä [${functionName}] Backlog R:${backlogR.length} EMS:${backlogEMS.length} COD:${backlogCOD.length}`);
    console.log(`üìä [${functionName}] Return R:${returnedR.length} EMS:${returnedEMS.length} COD:${returnedCOD.length}`);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
const sendMoneyStats = countNotSentMoney(wmsData);
const overview = {
  sendMoney: sendMoneyStats,
      prepare: calculateByType(wrpData),
      recorded: calculateRecorded(wrpData),
      backlog: {
        r: backlogR.length,
        ems: backlogEMS.length,
        cod: backlogCOD.length,
        total: backlogR.length + backlogEMS.length + backlogCOD.length
      },
      returned: {
        r: returnedR.length,
        ems: returnedEMS.length,
        cod: returnedCOD.length,
        total: returnedR.length + returnedEMS.length + returnedCOD.length
      }
    };
    
    const processTime = new Date().getTime() - startTime;
    console.log(`‚úÖ [${functionName}] ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${processTime}ms)`);
    console.log(`üìä [${functionName}] ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:`, JSON.stringify(overview));
    
    return overview;
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    
    return {
      sendMoney: { r: 0, ems: 0, cod: 0, total: 0 },
      prepare: { r: 0, ems: 0, cod: 0, total: 0 },
      recorded: { r: 0, ems: 0, cod: 0, total: 0 },
      backlog: { r: 0, ems: 0, cod: 0, total: 0 },
      returned: { r: 0, ems: 0, cod: 0, total: 0 }
    };
  }
}

/**
 * 8.2 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PowerUser)
 */
function getPowerUserTeamData() {
  const functionName = 'getPowerUserTeamData';
  const startTime = new Date().getTime();
  
  try {
    console.log(`üìä [${functionName}] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...`);
    
    const employees = getAllUsersData();
    const teamData = [];
    
    employees.forEach(emp => {
      const username = emp.Username;
      
      if (username && emp.Role && emp.Role.trim().toUpperCase() === 'USER') {
        const workData = getUserWorkOverview(username);
        
        const prepare = workData.prepare.total || 0;
        const recorded = workData.recorded.total || 0;
        const percentage = prepare > 0 ? Math.round((recorded / prepare) * 100) : 100;
        
        teamData.push({
          username: username,
          fullName: emp.Name || username,
          side: emp['Side '] || emp.Side || '',
          area: emp.Area || '',
          routes: emp.small || '',
          workData: workData,
          percentage: percentage,
          colorClass: getColorClass(percentage)
        });
      }
    });
    
    teamData.sort((a, b) => a.percentage - b.percentage);
    
    const processTime = new Date().getTime() - startTime;
    console.log(`‚úÖ [${functionName}] ‡πÇ‡∏´‡∏•‡∏î ${teamData.length} ‡∏Ñ‡∏ô (${processTime}ms)`);
    
    return teamData;
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return [];
  }
}

/**
 * 8.3 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï
 */
function getDetailWorkData(dataType, workType, username) {
  const functionName = 'getDetailWorkData';
  
  try {
    console.log(`üìã [${functionName}] Type: ${dataType}, WorkType: ${workType}, User: ${username || 'ALL'}`);
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    
    let sheetName;
    if (dataType === 'backlog') {
      if (workType === 'R') sheetName = 'SDIP Backlog R';
      else if (workType === 'EMS') sheetName = 'SDIP Backlog EMS';
      else if (workType === 'COD') sheetName = 'SDIP Backlog COD';
    } else {
      if (workType === 'R') sheetName = 'SDIP Returned R';
      else if (workType === 'EMS') sheetName = 'SDIP Returned  EMS';
      else if (workType === 'COD') sheetName = 'SDIP Returned  COD';
    }
    
    const sheet = spreadsheet.getSheetByName(sheetName);
    
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï: ${sheetName}`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const rows = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const operator = (row[3] || '').toString().trim();
      
      if (username && operator !== username) {
        continue;
      }
      
      rows.push(row);
    }
    
    console.log(`‚úÖ [${functionName}] ‡∏û‡∏ö ${rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    return {
      status: 'success',
      headers: headers,
      data: rows
    };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString(),
      headers: [],
      data: []
    };
  }
}
/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï WRP
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Tab "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
 */
function getNotRecordedData(username) {
  const functionName = 'getNotRecordedData';
  
  try {
    console.log(`üìã [${functionName}] ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á: ${username}`);
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = spreadsheet.getSheetByName('SDIP WRP ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
    
    if (!sheet) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï: SDIP WRP ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const notRecordedRows = [];
    
    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C (index 2) = ‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå F (index 5) = ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const operator = (row[2] || '').toString().trim();
      const status = (row[5] || '').toString().trim();
      
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      if (operator === username && status === '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢') {
        notRecordedRows.push(row);
      }
    }
    
    console.log(`‚úÖ [${functionName}] ‡∏û‡∏ö ${notRecordedRows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å`);
    
    return {
      status: 'success',
      headers: headers,
      data: notRecordedRows
    };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString(),
      headers: [],
      data: []
    };
  }
}

// =================================================================
// HELPER FUNCTIONS
// =================================================================

/**
/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ column index)
 */
function getDataFromSheet(spreadsheet, sheetName, username) {
  const sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï: ${sheetName}`);
    return [];
  }
  
  const data = sheet.getDataRange().getValues();
  const result = [];
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î column index ‡∏ï‡∏≤‡∏°‡∏ä‡∏µ‡∏ï
  let operatorColumnIndex;
  
  // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏µ‡∏ï WRP ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C (index 2)
  if (sheetName === 'SDIP WRP ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î') {
    operatorColumnIndex = 2; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C
  } else {
    // ‡∏ä‡∏µ‡∏ï‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (index 3)
    operatorColumnIndex = 3; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D
  }
  
  for (let i = 1; i < data.length; i++) {
    const operator = (data[i][operatorColumnIndex] || '').toString().trim();
    
    if (operator === username) {
      result.push(data[i]);
    }
  }
  
  console.log(`   ‚úì [${sheetName}] ‚Üí ${result.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (column ${operatorColumnIndex === 2 ? 'C' : 'D'})`);
  return result;
}
// =================================================================
// üìÇ CATEGORY RULES MANAGEMENT (‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
// =================================================================

/**
 * ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó "SDIP Category Rules"
 * @returns {Object} { prefixMap: {...}, priorities: [...] }
 */
function loadCategoryRules() {
  const functionName = 'loadCategoryRules';
  const CACHE_KEY = 'CATEGORY_RULES';
  const CACHE_TIME = 3600; // 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  
  try {
    // ‡πÄ‡∏ä‡πá‡∏Ñ cache ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance)
    const cache = CacheService.getScriptCache();
    const cachedRules = cache.get(CACHE_KEY);
    
    if (cachedRules) {
      console.log(`‚úÖ [${functionName}] ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Cache`);
      return JSON.parse(cachedRules);
    }
    
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ cache ‚Üí ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó
    console.log(`üìä [${functionName}] ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏é‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó...`);
    
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('SDIP Category Rules');
    
    if (!sheet) {
      console.warn(`‚ö†Ô∏è [${functionName}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï "SDIP Category Rules" - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default`);
      return getDefaultRules();
    }
    
    const data = sheet.getDataRange().getValues();
    const rules = {
      prefixMap: {},      // { 'EA': 'COD', 'R': 'R', ... }
      priorities: []      // ['EA', 'WA', 'WC', 'JA', 'R', 'B', ...] ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° length
    };
    
    // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å (header)
    for (let i = 1; i < data.length; i++) {
      const prefix = (data[i][0] || '').toString().trim().toUpperCase();
      const category = (data[i][1] || '').toString().trim().toUpperCase();
      
      if (prefix && category) {
        rules.prefixMap[prefix] = category;
        rules.priorities.push(prefix);
      }
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á priorities ‡∏à‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß ‚Üí ‡∏™‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πá‡∏Ñ EA, WA ‡∏Å‡πà‡∏≠‡∏ô E, W)
    rules.priorities.sort((a, b) => b.length - a.length);
    
    console.log(`‚úÖ [${functionName}] ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏é‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${rules.priorities.length} ‡∏Å‡∏é`);
    console.log(`üìã [${functionName}] Priorities:`, rules.priorities.join(', '));
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
    cache.put(CACHE_KEY, JSON.stringify(rules), CACHE_TIME);
    
    return rules;
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return getDefaultRules();
  }
}

/**
 * ‡∏Å‡∏é default ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏µ‡∏ó Category Rules
 */
function getDefaultRules() {
  return {
    prefixMap: {
      // COD (‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô - 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
      'EA': 'COD', 'WA': 'COD', 'WC': 'COD', 'JA': 'COD',
      // R
      'R': 'R', 'B': 'R', 'O': 'R', 'C': 'R', 'V': 'R', 'P': 'R',
      // EMS
      'E': 'EMS', 'J': 'EMS', 'W': 'EMS', 'L': 'EMS'
    },
    priorities: ['EA', 'WA', 'WC', 'JA', 'R', 'B', 'O', 'C', 'V', 'P', 'E', 'J', 'W', 'L']
  };
}

/**
 * ‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (‡πÉ‡∏ä‡πâ‡∏Å‡∏é‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó)
 */
function categorizeTrackingNumber(trackingNumber, rules) {
  const number = (trackingNumber || '').toString().trim().toUpperCase();
  
  if (!number) return 'UNKNOWN';
  
  // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≤‡∏° priorities (‡∏¢‡∏≤‡∏ß ‚Üí ‡∏™‡∏±‡πâ‡∏ô)
  for (const prefix of rules.priorities) {
    if (number.startsWith(prefix)) {
      return rules.prefixMap[prefix];
    }
  }
  
  return 'UNKNOWN';
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á cache ‡∏Å‡∏é (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏µ‡∏ó Category Rules)
 */
function clearCategoryRulesCache() {
  const cache = CacheService.getScriptCache();
  cache.remove('CATEGORY_RULES');
  console.log('‚úÖ ‡∏•‡πâ‡∏≤‡∏á Category Rules Cache ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏é‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  const rules = loadCategoryRules();
  console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏é‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', rules.priorities.length, '‡∏Å‡∏é');
  
  return { status: 'success', message: '‡∏•‡πâ‡∏≤‡∏á Cache ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏é‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' };
}
/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° R/EMS/COD (‡πÉ‡∏ä‡πâ‡∏Å‡∏é‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó)
 */
function calculateByType(data) {
  const rules = loadCategoryRules();
  const stats = { r: 0, ems: 0, cod: 0, total: 0 };
  
  data.forEach(row => {
    const trackingNumber = (row[1] || '').toString().trim();
    const category = categorizeTrackingNumber(trackingNumber, rules);
    
    if (category === 'R') {
      stats.r++;
    } else if (category === 'EMS') {
      stats.ems++;
    } else if (category === 'COD') {
      stats.cod++;
    }
  });
  
  stats.total = stats.r + stats.ems + stats.cod;
  return stats;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ‡∏Å‡∏é‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó)
 */
function calculateRecorded(data) {
  const rules = loadCategoryRules();
  const stats = { r: 0, ems: 0, cod: 0, total: 0 };
  
  data.forEach(row => {
    const trackingNumber = (row[1] || '').toString().trim();
    const status = (row[5] || '').toString().trim();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß = ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢"
    const isRecorded = status !== '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢';
    
    if (isRecorded) {
      const category = categorizeTrackingNumber(trackingNumber, rules);
      
      if (category === 'R') {
        stats.r++;
      } else if (category === 'EMS') {
        stats.ems++;
      } else if (category === 'COD') {
        stats.cod++;
      }
    }
  });
  
  stats.total = stats.r + stats.ems + stats.cod;
  return stats;
}

/**
 * ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô (‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå K = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô")
 * ‚ö†Ô∏è ‡∏ä‡∏µ‡∏ï WMS = COD ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏¢‡∏Å R/EMS
 */
function countNotSentMoney(data) {
  const stats = { r: 0, ems: 0, cod: 0, total: 0 };
  
  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå K = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô")
  data.forEach(row => {
    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå K (index 10) = ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô
    const sendMoneyStatus = (row[10] || '').toString().trim();
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô
    if (sendMoneyStatus === '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô') {
      stats.cod++; // ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô COD ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    }
  });
  
  // R ‡πÅ‡∏•‡∏∞ EMS = 0 ‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ WMS ‡πÄ‡∏õ‡πá‡∏ô COD ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  stats.r = 0;
  stats.ems = 0;
  stats.total = stats.cod;
  
  return stats;
}

/**
 * ‚ö†Ô∏è ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ)
 * ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ countNotSentMoney ‡πÅ‡∏ó‡∏ô
 */
function countCOD(data) {
  return data.filter(row => {
    const trackingNumber = (row[1] || '').toString().trim();
    return trackingNumber.startsWith('W') || trackingNumber.startsWith('J');
  }).length;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tracking number ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö workType ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ‡∏Å‡∏é‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó)
 */
function matchesWorkType(trackingNumber, workType) {
  const rules = loadCategoryRules();
  const category = categorizeTrackingNumber(trackingNumber, rules);
  
  if (workType === 'R') {
    return category === 'R';
  } else if (workType === 'EMS') {
    return category === 'EMS';
  } else if (workType === 'COD') {
    return category === 'COD';
  }
  
  return false;
}
/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î CSS Class ‡∏ï‡∏≤‡∏° %
 */
function getColorClass(percentage) {
  if (percentage >= 100) return 'green';
  if (percentage >= 81) return 'yellow';
  if (percentage >= 31) return 'orange';
  return 'red';
}

/**
 * 9. Helper Functions
 */

function getRoleIcon(role) {
  const icons = {
    'ADMIN': 'üëë',
    'POWERUSER': '‚ö°',
    'USER': 'üë§'
  };
  return icons[role.toUpperCase()] || 'üë§';
}

function getRoleDisplayName(role) {
  const names = {
    'ADMIN': '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
    'POWERUSER': '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
    'USER': '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
  };
  return names[role.toUpperCase()] || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
}

function getRoleColor(role) {
  const colors = {
    'ADMIN': '#e74c3c',
    'POWERUSER': '#f39c12',
    'USER': '#27ae60'
  };
  return colors[role.toUpperCase()] || '#95a5a6';
}

/**
 * 10. ‡∏™‡∏£‡πâ‡∏≤‡∏á Error Dashboard
 */
function createErrorDashboard(errorMessage) {
  return `
    <div style="
      font-family: 'Kanit', sans-serif;
      padding: 40px;
      background: #f5f7fa;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    ">
      <div style="
        background: white;
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        text-align: center;
        max-width: 500px;
      ">
        <div style="font-size: 64px; margin-bottom: 20px;">‚ö†Ô∏è</div>
        <h2 style="color: #e74c3c; margin-bottom: 15px;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
        <p style="color: #555; line-height: 1.6; margin-bottom: 20px;">
          ${errorMessage}
        </p>
        <button onclick="location.reload()" style="
          background: #3498db;
          color: white;
          border: none;
          padding: 12px 24px;
          border-radius: 8px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
        ">
          üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        </button>
      </div>
    </div>
  `;
}
/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏£‡∏±‡∏ô‡πÉ‡∏ô Apps Script Editor
 */
function testGetUserWorkOverview() {
  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô username ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
  const testUsername = 'desrit.wi'; 
  
  console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö getUserWorkOverview...');
  
  const result = getUserWorkOverview(testUsername);
  
  console.log('üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
  console.log(JSON.stringify(result, null, 2));
  
  Logger.log('=== ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ===');
  Logger.log(JSON.stringify(result, null, 2));
}
function getUserDashboardHtml(userInfo) {
  console.log(`üë§ [USER] ‡πÇ‡∏´‡∏•‡∏î Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${userInfo.username}`);
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á User ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
    const userData = getUserWorkOverview(userInfo.username);
    const userProfile = getUserPersonalData(userInfo.username);
    
    // ‚≠ê Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ
    console.log(`üìä [USER] userData type: ${typeof userData}`);
    console.log(`üìä [USER] userData is null?: ${userData === null}`);
    console.log(`üìä [USER] userData is undefined?: ${userData === undefined}`);
    console.log(`üìä [USER] userData:`, JSON.stringify(userData));
    console.log(`üë§ [USER] userProfile:`, JSON.stringify(userProfile));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!userData) {
      throw new Error('userData is null or undefined');
    }
    
    if (!userProfile) {
      throw new Error('userProfile is null or undefined');
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML Template
    const template = HtmlService.createTemplateFromFile('User_Dashboard');
    template.userInfo = userInfo;
    template.userData = userData;
    template.userProfile = userProfile;
    
    console.log('‚úÖ [USER] ‡∏Å‡∏≥‡∏•‡∏±‡∏á evaluate template...');
    
    const output = template.evaluate().getContent();
    
    console.log('‚úÖ [USER] Template ‡∏ñ‡∏π‡∏Å evaluate ‡πÅ‡∏•‡πâ‡∏ß, HTML length:', output.length);
    
    return output;
    
  } catch (error) {
    console.error(`‚ùå [USER] Error: ${error.toString()}`);
    console.error(`‚ùå [USER] Stack: ${error.stack}`);
    throw error;
  }
}
function testSendMoney() {
  const username = 'wibunluk.pi'; // ‡∏´‡∏£‡∏∑‡∏≠ username ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô...');
  
  const result = getUserWorkOverview(username);
  
  console.log('üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå sendMoney:', JSON.stringify(result.sendMoney));
}
function testCategoryRules() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó...');
  
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏é
  const rules = loadCategoryRules();
  
  console.log('üìã Priorities:', rules.priorities);
  console.log('üìä Prefix Map:', rules.prefixMap);
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  const testNumbers = [
    'R123456',
    'EA123456',
    'WA789012',
    'E456789',
    'W123456',
    'C789012',
    'L345678'
  ];
  
  console.log('\nüîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:');
  testNumbers.forEach(num => {
    const category = categorizeTrackingNumber(num, rules);
    console.log(`  ${num} ‚Üí ${category}`);
  });
}
/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï WRP
 */
function getNotRecordedData(username) {
  const functionName = 'getNotRecordedData';
  
  try {
    console.log(`üìã [${functionName}] ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á: ${username}`);
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = spreadsheet.getSheetByName('SDIP WRP ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
    
    if (!sheet) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï: SDIP WRP ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const notRecordedRows = [];
    
    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C (index 2) = ‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå F (index 5) = ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const operator = (row[2] || '').toString().trim();
      const status = (row[5] || '').toString().trim();
      
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      if (operator === username && status === '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢') {
        notRecordedRows.push(row);
      }
    }
    
    console.log(`‚úÖ [${functionName}] ‡∏û‡∏ö ${notRecordedRows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å`);
    
    return {
      status: 'success',
      headers: headers,
      data: notRecordedRows
    };
    
  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString(),
      headers: [],
      data: []
    };
  }
}
