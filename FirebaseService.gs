// =================================================================
// üî• FIREBASE SERVICE - REALTIME DATABASE CONNECTION
// =================================================================
// Description: ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Realtime Database
// Author: Claude Code Migration Team
// Created: 2025-10-29
// =================================================================

// =================================================================
// üìÇ SECTION 1: FIREBASE CONFIGURATION
// =================================================================

/**
 * Firebase Configuration
 *
 * IMPORTANT: ‡πÉ‡∏ä‡πâ Secret Manager ‡∏´‡∏£‡∏∑‡∏≠ Properties Service ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á
 * ‡∏≠‡∏¢‡πà‡∏≤ hardcode ‡πÉ‡∏ô production!
 */
const FIREBASE_CONFIG = {
  databaseURL: 'https://x-85fc7-default-rtdb.asia-southeast1.firebasedatabase.app',
  secret: 'FgpZbl8mveCB7YxzRVo9pkLMuc5T33AmmaN7u4WF'
};

// =================================================================
// üìÇ SECTION 2: CORE FIREBASE FUNCTIONS
// =================================================================

/**
 * 2.1 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase
 *
 * @param {string} path - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô 'users/john' ‡∏´‡∏£‡∏∑‡∏≠ 'workData'
 * @returns {Object|null} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
 *
 * Example:
 * const users = firebaseGet('users');
 * const johnData = firebaseGet('users/john');
 */
function firebaseGet(path) {
  const startTime = new Date().getTime();

  try {
    console.log(`üî• [Firebase GET] Path: ${path}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path
    if (!path) {
      throw new Error('Path is required');
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL
    const url = `${FIREBASE_CONFIG.databaseURL}/${path}.json?auth=${FIREBASE_CONFIG.secret}`;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    const response = UrlFetchApp.fetch(url, {
      method: 'get',
      muteHttpExceptions: true
    });

    const responseCode = response.getResponseCode();

    if (responseCode !== 200) {
      throw new Error(`HTTP ${responseCode}: ${response.getContentText()}`);
    }

    const data = JSON.parse(response.getContentText());
    const duration = new Date().getTime() - startTime;

    console.log(`‚úÖ [Firebase GET] Success in ${duration}ms`);

    return data;

  } catch (error) {
    console.error(`‚ùå [Firebase GET ERROR] ${path}:`, error.toString());
    return null;
  }
}

/**
 * 2.2 ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firebase (PUT - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö)
 *
 * @param {string} path - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
 *
 * Example:
 * firebasePut('users/john', { name: 'John Doe', role: 'User' });
 */
function firebasePut(path, data) {
  const startTime = new Date().getTime();

  try {
    console.log(`üî• [Firebase PUT] Path: ${path}`);

    if (!path) {
      throw new Error('Path is required');
    }

    const url = `${FIREBASE_CONFIG.databaseURL}/${path}.json?auth=${FIREBASE_CONFIG.secret}`;

    const response = UrlFetchApp.fetch(url, {
      method: 'put',
      contentType: 'application/json',
      payload: JSON.stringify(data),
      muteHttpExceptions: true
    });

    const responseCode = response.getResponseCode();

    if (responseCode !== 200) {
      throw new Error(`HTTP ${responseCode}: ${response.getContentText()}`);
    }

    const duration = new Date().getTime() - startTime;
    console.log(`‚úÖ [Firebase PUT] Success in ${duration}ms`);

    return true;

  } catch (error) {
    console.error(`‚ùå [Firebase PUT ERROR] ${path}:`, error.toString());
    return false;
  }
}

/**
 * 2.3 ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firebase (PATCH - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
 *
 * @param {string} path - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó (‡πÅ‡∏Å‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ key ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤)
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 *
 * Example:
 * firebasePatch('users/john', { lastLogin: '2024-01-01' });
 */
function firebasePatch(path, data) {
  const startTime = new Date().getTime();

  try {
    console.log(`üî• [Firebase PATCH] Path: ${path}`);

    if (!path) {
      throw new Error('Path is required');
    }

    const url = `${FIREBASE_CONFIG.databaseURL}/${path}.json?auth=${FIREBASE_CONFIG.secret}`;

    const response = UrlFetchApp.fetch(url, {
      method: 'patch',
      contentType: 'application/json',
      payload: JSON.stringify(data),
      muteHttpExceptions: true
    });

    const responseCode = response.getResponseCode();

    if (responseCode !== 200) {
      throw new Error(`HTTP ${responseCode}: ${response.getContentText()}`);
    }

    const duration = new Date().getTime() - startTime;
    console.log(`‚úÖ [Firebase PATCH] Success in ${duration}ms`);

    return true;

  } catch (error) {
    console.error(`‚ùå [Firebase PATCH ERROR] ${path}:`, error.toString());
    return false;
  }
}

/**
 * 2.4 ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase
 *
 * @param {string} path - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 *
 * Example:
 * firebaseDelete('sessions/old_token_123');
 */
function firebaseDelete(path) {
  const startTime = new Date().getTime();

  try {
    console.log(`üî• [Firebase DELETE] Path: ${path}`);

    if (!path) {
      throw new Error('Path is required');
    }

    const url = `${FIREBASE_CONFIG.databaseURL}/${path}.json?auth=${FIREBASE_CONFIG.secret}`;

    const response = UrlFetchApp.fetch(url, {
      method: 'delete',
      muteHttpExceptions: true
    });

    const responseCode = response.getResponseCode();

    if (responseCode !== 200) {
      throw new Error(`HTTP ${responseCode}: ${response.getContentText()}`);
    }

    const duration = new Date().getTime() - startTime;
    console.log(`‚úÖ [Firebase DELETE] Success in ${duration}ms`);

    return true;

  } catch (error) {
    console.error(`‚ùå [Firebase DELETE ERROR] ${path}:`, error.toString());
    return false;
  }
}

/**
 * 2.5 ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ Auto-generated Key (POST)
 *
 * @param {string} path - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°
 * @returns {string|null} Generated key ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
 *
 * Example:
 * const logId = firebasePost('logs', { action: 'login', timestamp: Date.now() });
 */
function firebasePost(path, data) {
  const startTime = new Date().getTime();

  try {
    console.log(`üî• [Firebase POST] Path: ${path}`);

    if (!path) {
      throw new Error('Path is required');
    }

    const url = `${FIREBASE_CONFIG.databaseURL}/${path}.json?auth=${FIREBASE_CONFIG.secret}`;

    const response = UrlFetchApp.fetch(url, {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify(data),
      muteHttpExceptions: true
    });

    const responseCode = response.getResponseCode();

    if (responseCode !== 200) {
      throw new Error(`HTTP ${responseCode}: ${response.getContentText()}`);
    }

    const result = JSON.parse(response.getContentText());
    const duration = new Date().getTime() - startTime;

    console.log(`‚úÖ [Firebase POST] Success in ${duration}ms - Key: ${result.name}`);

    return result.name; // Firebase returns { name: "generated-key" }

  } catch (error) {
    console.error(`‚ùå [Firebase POST ERROR] ${path}:`, error.toString());
    return null;
  }
}

// =================================================================
// üìÇ SECTION 3: HIGH-LEVEL USER FUNCTIONS
// =================================================================

/**
 * 3.1 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 *
 * @returns {Object} { username: { password, role, profile }, ... }
 */
function firebaseGetAllUsers() {
  console.log('üë• [Firebase] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Users...');

  const users = firebaseGet('users');

  if (!users) {
    console.warn('‚ö†Ô∏è [Firebase] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Users');
    return {};
  }

  console.log(`‚úÖ [Firebase] ‡∏û‡∏ö ${Object.keys(users).length} Users`);
  return users;
}

/**
 * 3.2 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° Username
 *
 * @param {string} username - Username ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á
 * @returns {Object|null} { password, role, profile } ‡∏´‡∏£‡∏∑‡∏≠ null
 */
function firebaseGetUser(username) {
  console.log(`üë§ [Firebase] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User: ${username}`);

  if (!username) {
    console.error('‚ùå [Firebase] Username is required');
    return null;
  }

  const user = firebaseGet(`users/${username}`);

  if (!user) {
    console.warn(`‚ö†Ô∏è [Firebase] ‡πÑ‡∏°‡πà‡∏û‡∏ö User: ${username}`);
    return null;
  }

  return user;
}

/**
 * 3.3 ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 *
 * @param {string} username - Username
 * @param {Object} userData - { password, role, profile }
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
function firebaseSetUser(username, userData) {
  console.log(`üë§ [Firebase] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User: ${username}`);

  if (!username || !userData) {
    console.error('‚ùå [Firebase] Username ‡πÅ‡∏•‡∏∞ userData ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ');
    return false;
  }

  return firebasePut(`users/${username}`, userData);
}

/**
 * 3.4 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Data ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 *
 * @param {string} username - Username
 * @returns {Object|null} { sendMoney, prepare, recorded, backlog, returned }
 */
function firebaseGetWorkData(username) {
  console.log(`üìä [Firebase] ‡∏î‡∏∂‡∏á Work Data: ${username}`);

  if (!username) {
    console.error('‚ùå [Firebase] Username is required');
    return null;
  }

  const workData = firebaseGet(`workData/${username}`);

  if (!workData) {
    console.warn(`‚ö†Ô∏è [Firebase] ‡πÑ‡∏°‡πà‡∏û‡∏ö Work Data: ${username}`);
    return null;
  }

  return workData;
}

/**
 * 3.5 ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Work Data ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 *
 * @param {string} username - Username
 * @param {Object} workData - { sendMoney, prepare, recorded, backlog, returned }
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
function firebaseSetWorkData(username, workData) {
  console.log(`üìä [Firebase] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Work Data: ${username}`);

  if (!username || !workData) {
    console.error('‚ùå [Firebase] Username ‡πÅ‡∏•‡∏∞ workData ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ');
    return false;
  }

  return firebasePut(`workData/${username}`, workData);
}

/**
 * 3.6 ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Session Token
 *
 * @param {string} token - Session Token
 * @param {Object} sessionData - { username, role, expires, loginTime }
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
function firebaseSetSession(token, sessionData) {
  console.log(`üîë [Firebase] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Session: ${token.substring(0, 8)}...`);

  if (!token || !sessionData) {
    console.error('‚ùå [Firebase] Token ‡πÅ‡∏•‡∏∞ sessionData ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ');
    return false;
  }

  return firebasePut(`sessions/${token}`, sessionData);
}

/**
 * 3.7 ‡∏î‡∏∂‡∏á Session Token
 *
 * @param {string} token - Session Token
 * @returns {Object|null} { username, role, expires, loginTime }
 */
function firebaseGetSession(token) {
  console.log(`üîë [Firebase] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session: ${token.substring(0, 8)}...`);

  if (!token) {
    console.error('‚ùå [Firebase] Token is required');
    return null;
  }

  const session = firebaseGet(`sessions/${token}`);

  if (!session) {
    console.warn('‚ö†Ô∏è [Firebase] Session ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
    return null;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (session.expires && session.expires < new Date().getTime()) {
    console.warn('‚ö†Ô∏è [Firebase] Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
    firebaseDelete(`sessions/${token}`); // ‡∏•‡∏ö Session ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    return null;
  }

  return session;
}

/**
 * 3.8 ‡∏•‡∏ö Session Token
 *
 * @param {string} token - Session Token
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
function firebaseDeleteSession(token) {
  console.log(`üîë [Firebase] ‡∏•‡∏ö Session: ${token.substring(0, 8)}...`);

  if (!token) {
    console.error('‚ùå [Firebase] Token is required');
    return false;
  }

  return firebaseDelete(`sessions/${token}`);
}

// =================================================================
// üìÇ SECTION 4: UTILITY FUNCTIONS
// =================================================================

/**
 * 4.1 ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
 *
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
 */
function firebaseTestConnection() {
  console.log('üß™ [Firebase] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');

  try {
    const url = `${FIREBASE_CONFIG.databaseURL}/.json?auth=${FIREBASE_CONFIG.secret}`;

    const response = UrlFetchApp.fetch(url, {
      method: 'get',
      muteHttpExceptions: true
    });

    const responseCode = response.getResponseCode();

    if (responseCode === 200) {
      console.log('‚úÖ [Firebase] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      return true;
    } else {
      console.error(`‚ùå [Firebase] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - HTTP ${responseCode}`);
      return false;
    }

  } catch (error) {
    console.error('‚ùå [Firebase] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ:', error.toString());
    return false;
  }
}

/**
 * 4.2 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firebase (Debug)
 *
 * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function firebaseGetAll() {
  console.log('üåç [Firebase] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Debug Only)...');
  return firebaseGet('');
}

/**
 * 4.3 ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‚ö†Ô∏è ‡∏£‡∏∞‡∏ß‡∏±‡∏á!)
 *
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
function firebaseClearAll() {
  console.warn('‚ö†Ô∏è [Firebase] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');

  const confirm = Browser.msgBox(
    '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Firebase?',
    Browser.Buttons.YES_NO
  );

  if (confirm !== 'yes') {
    console.log('‚ùå [Firebase] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    return false;
  }

  return firebaseDelete('');
}

console.log('‚úÖ FirebaseService.gs loaded successfully');
