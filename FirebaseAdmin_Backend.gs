// =================================================================
// üî• FIREBASE ADMIN BACKEND - API Functions
// =================================================================
// Description: Backend API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase Admin Dashboard
// Author: Claude Code
// Created: 2025-10-29
// =================================================================

// =================================================================
// üìÇ SECTION 1: ADMIN DASHBOARD ACCESS
// =================================================================

/**
 * 1.1 ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Firebase Admin Dashboard
 *
 * @returns {HtmlOutput} Firebase Admin Dashboard HTML
 */
function getFirebaseAdminDashboard() {
  const functionName = 'getFirebaseAdminDashboard';

  try {
    console.log(`üî• [${functionName}] ‡πÇ‡∏´‡∏•‡∏î Firebase Admin Dashboard...`);

    const template = HtmlService.createTemplateFromFile('FirebaseAdmin_Dashboard');

    return template.evaluate()
        .setTitle('Firebase Admin Dashboard - SDIP')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
        .addMetaTag('viewport', 'width=device-width, initial-scale=1');

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return createErrorPage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Admin Dashboard ‡πÑ‡∏î‡πâ', error.toString());
  }
}

// =================================================================
// üìÇ SECTION 2: USERS MANAGEMENT
// =================================================================

/**
 * 2.1 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firebase
 *
 * @returns {Object} { status, data }
 */
function adminGetAllUsers() {
  const functionName = 'adminGetAllUsers';

  try {
    console.log(`üë• [${functionName}] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Users...`);

    const users = firebaseGetAllUsers();

    if (!users) {
      return {
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Users ‡πÉ‡∏ô Firebase'
      };
    }

    console.log(`‚úÖ [${functionName}] ‡∏û‡∏ö ${Object.keys(users).length} Users`);

    return {
      status: 'success',
      data: users
    };

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * 2.2 ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó User ‡πÉ‡∏ô Firebase
 *
 * @param {string} username - Username
 * @param {Object} userData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User { password, role, profile }
 * @returns {Object} { status, message }
 */
function adminSaveUser(username, userData) {
  const functionName = 'adminSaveUser';

  try {
    console.log(`üíæ [${functionName}] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User: ${username}`);

    if (!username || !userData) {
      return {
        status: 'error',
        message: 'Username ‡πÅ‡∏•‡∏∞ userData ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ'
      };
    }

    const success = firebaseSetUser(username, userData);

    if (success) {
      console.log(`‚úÖ [${functionName}] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${username} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

      // ‡∏•‡πâ‡∏≤‡∏á Cache
      CacheService.getScriptCache().remove('USER_DATABASE');

      return {
        status: 'success',
        message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      };
    } else {
      return {
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ‡πÑ‡∏î‡πâ'
      };
    }

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * 2.3 ‡∏•‡∏ö User ‡∏à‡∏≤‡∏Å Firebase
 *
 * @param {string} username - Username ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 * @returns {Object} { status, message }
 */
function adminDeleteUser(username) {
  const functionName = 'adminDeleteUser';

  try {
    console.log(`üóëÔ∏è [${functionName}] ‡∏•‡∏ö User: ${username}`);

    if (!username) {
      return {
        status: 'error',
        message: 'Username ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ'
      };
    }

    const success = firebaseDelete(`users/${username}`);

    if (success) {
      console.log(`‚úÖ [${functionName}] ‡∏•‡∏ö ${username} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

      // ‡∏•‡πâ‡∏≤‡∏á Cache
      CacheService.getScriptCache().remove('USER_DATABASE');

      // ‡∏•‡∏ö Work Data ‡∏î‡πâ‡∏ß‡∏¢
      firebaseDelete(`workData/${username}`);

      return {
        status: 'success',
        message: '‡∏•‡∏ö User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      };
    } else {
      return {
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö User ‡πÑ‡∏î‡πâ'
      };
    }

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

// =================================================================
// üìÇ SECTION 3: WORK DATA MANAGEMENT
// =================================================================

/**
 * 3.1 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Data ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firebase
 *
 * @returns {Object} { status, data }
 */
function adminGetAllWorkData() {
  const functionName = 'adminGetAllWorkData';

  try {
    console.log(`üìä [${functionName}] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Data...`);

    const workData = firebaseGet('workData');

    if (!workData) {
      return {
        status: 'success',
        data: {}
      };
    }

    console.log(`‚úÖ [${functionName}] ‡∏û‡∏ö ${Object.keys(workData).length} Work Data records`);

    return {
      status: 'success',
      data: workData
    };

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * 3.2 ‡∏•‡∏ö Work Data ‡∏Ç‡∏≠‡∏á User
 *
 * @param {string} username - Username
 * @returns {Object} { status, message }
 */
function adminDeleteWorkData(username) {
  const functionName = 'adminDeleteWorkData';

  try {
    console.log(`üóëÔ∏è [${functionName}] ‡∏•‡∏ö Work Data: ${username}`);

    if (!username) {
      return {
        status: 'error',
        message: 'Username ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ'
      };
    }

    const success = firebaseDelete(`workData/${username}`);

    if (success) {
      console.log(`‚úÖ [${functionName}] ‡∏•‡∏ö Work Data ‡∏Ç‡∏≠‡∏á ${username} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

      return {
        status: 'success',
        message: '‡∏•‡∏ö Work Data ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      };
    } else {
      return {
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Work Data ‡πÑ‡∏î‡πâ'
      };
    }

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

// =================================================================
// üìÇ SECTION 4: SESSIONS MANAGEMENT
// =================================================================

/**
 * 4.1 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sessions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firebase
 *
 * @returns {Object} { status, data }
 */
function adminGetAllSessions() {
  const functionName = 'adminGetAllSessions';

  try {
    console.log(`üîë [${functionName}] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sessions...`);

    const sessions = firebaseGet('sessions');

    if (!sessions) {
      return {
        status: 'success',
        data: {}
      };
    }

    console.log(`‚úÖ [${functionName}] ‡∏û‡∏ö ${Object.keys(sessions).length} Sessions`);

    return {
      status: 'success',
      data: sessions
    };

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * 4.2 ‡∏•‡∏ö Session
 *
 * @param {string} token - Session Token
 * @returns {Object} { status, message }
 */
function adminDeleteSession(token) {
  const functionName = 'adminDeleteSession';

  try {
    console.log(`üóëÔ∏è [${functionName}] ‡∏•‡∏ö Session: ${token.substring(0, 8)}...`);

    if (!token) {
      return {
        status: 'error',
        message: 'Token ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ'
      };
    }

    const success = firebaseDeleteSession(token);

    if (success) {
      console.log(`‚úÖ [${functionName}] ‡∏•‡∏ö Session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

      return {
        status: 'success',
        message: '‡∏•‡∏ö Session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      };
    } else {
      return {
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Session ‡πÑ‡∏î‡πâ'
      };
    }

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * 4.3 ‡∏•‡∏ö Sessions ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 *
 * @returns {Object} { status, message, deleted }
 */
function adminClearExpiredSessions() {
  const functionName = 'adminClearExpiredSessions';

  try {
    console.log(`üóëÔ∏è [${functionName}] ‡∏•‡∏ö Sessions ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏...`);

    const sessions = firebaseGet('sessions');

    if (!sessions) {
      return {
        status: 'success',
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ Sessions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö',
        deleted: 0
      };
    }

    const now = new Date().getTime();
    let deletedCount = 0;

    for (const [token, session] of Object.entries(sessions)) {
      if (session.expires && session.expires < now) {
        firebaseDeleteSession(token);
        deletedCount++;
      }
    }

    console.log(`‚úÖ [${functionName}] ‡∏•‡∏ö Sessions ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${deletedCount}`);

    return {
      status: 'success',
      message: '‡∏•‡∏ö Sessions ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      deleted: deletedCount
    };

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString(),
      deleted: 0
    };
  }
}

// =================================================================
// üìÇ SECTION 5: STATISTICS
// =================================================================

/**
 * 5.1 ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 *
 * @returns {Object} { status, data }
 */
function adminGetStatistics() {
  const functionName = 'adminGetStatistics';

  try {
    console.log(`üìà [${functionName}] ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const users = firebaseGet('users') || {};
    const workData = firebaseGet('workData') || {};
    const sessions = firebaseGet('sessions') || {};

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Admins
    let adminCount = 0;
    for (const [username, user] of Object.entries(users)) {
      if (user.role === 'Admin' || user.role === 'PowerUser') {
        adminCount++;
      }
    }

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Active Sessions
    const now = new Date().getTime();
    let activeSessions = 0;
    for (const [token, session] of Object.entries(sessions)) {
      if (session.expires && session.expires > now) {
        activeSessions++;
      }
    }

    const stats = {
      users: Object.keys(users).length,
      workData: Object.keys(workData).length,
      sessions: activeSessions,
      admins: adminCount
    };

    console.log(`‚úÖ [${functionName}] ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:`, JSON.stringify(stats));

    return {
      status: 'success',
      data: stats
    };

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

// =================================================================
// üìÇ SECTION 6: BATCH OPERATIONS
// =================================================================

/**
 * 6.1 Sync Work Data ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Sheets ‚Üí Firebase
 *
 * @returns {Object} { status, message, synced }
 */
function adminSyncAllWorkData() {
  const functionName = 'adminSyncAllWorkData';

  try {
    console.log(`üîÑ [${functionName}] Sync Work Data ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...`);

    const users = firebaseGetAllUsers();

    if (!users || Object.keys(users).length === 0) {
      return {
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Users'
      };
    }

    let syncedCount = 0;
    const usernames = Object.keys(users);

    for (const username of usernames) {
      try {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Work Data ‡∏à‡∏≤‡∏Å Sheets
        const workData = getUserWorkOverview(username);

        if (workData) {
          firebaseSetWorkData(username, workData);
          syncedCount++;
          console.log(`‚úÖ [${functionName}] Sync ${username} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        }
      } catch (error) {
        console.error(`‚ùå [${functionName}] Sync ${username} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error.toString());
      }
    }

    console.log(`‚úÖ [${functionName}] Sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${syncedCount}/${usernames.length}`);

    return {
      status: 'success',
      message: `Sync Work Data ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${syncedCount}/${usernames.length}`,
      synced: syncedCount
    };

  } catch (error) {
    console.error(`‚ùå [${functionName}] Error:`, error.toString());
    return {
      status: 'error',
      message: error.toString(),
      synced: 0
    };
  }
}

console.log('‚úÖ FirebaseAdmin_Backend.gs loaded successfully');
